/**
 * KLAYTN OPEN API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonRpcRequest model module.
 * @module model/JsonRpcRequest
 * @version 1.10.0
 */
class JsonRpcRequest {
    /**
     * Constructs a new <code>JsonRpcRequest</code>.
     * @alias module:model/JsonRpcRequest
     * @param method {String} Method name
     * @param id {Number} Request ID, Random or Auto incrementation
     * @param jsonrpc {String} JSON-RPC Version (2.0)
     */
    constructor(method, id, jsonrpc) { 
        
        JsonRpcRequest.initialize(this, method, id, jsonrpc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, id, jsonrpc) { 
        obj['method'] = method;
        obj['id'] = id || 1;
        obj['jsonrpc'] = jsonrpc || '2.0';
    }

    /**
     * Constructs a <code>JsonRpcRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonRpcRequest} obj Optional instance to populate.
     * @return {module:model/JsonRpcRequest} The populated <code>JsonRpcRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonRpcRequest();

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('jsonrpc')) {
                obj['jsonrpc'] = ApiClient.convertToType(data['jsonrpc'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonRpcRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonRpcRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JsonRpcRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['jsonrpc'] && !(typeof data['jsonrpc'] === 'string' || data['jsonrpc'] instanceof String)) {
            throw new Error("Expected the field `jsonrpc` to be a primitive type in the JSON string but got " + data['jsonrpc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['params'])) {
            throw new Error("Expected the field `params` to be an array in the JSON data but got " + data['params']);
        }

        return true;
    }


}

JsonRpcRequest.RequiredProperties = ["method", "id", "jsonrpc"];

/**
 * Method name
 * @member {String} method
 */
JsonRpcRequest.prototype['method'] = undefined;

/**
 * Request ID, Random or Auto incrementation
 * @member {Number} id
 * @default 1
 */
JsonRpcRequest.prototype['id'] = 1;

/**
 * JSON-RPC Version (2.0)
 * @member {String} jsonrpc
 * @default '2.0'
 */
JsonRpcRequest.prototype['jsonrpc'] = '2.0';

/**
 * @member {Array.<Object>} params
 */
JsonRpcRequest.prototype['params'] = undefined;






export default JsonRpcRequest;

