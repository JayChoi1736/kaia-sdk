/**
 * KLAYTN OPEN API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorMember model module.
 * @module model/ErrorMember
 * @version 1.10.0
 */
class ErrorMember {
    /**
     * Constructs a new <code>ErrorMember</code>.
     * @alias module:model/ErrorMember
     * @param code {Number} A Number that indicates the error type that occurred. This MUST be an integer.  | code | message | description | |-----|-----|-------| | -32700   | Parse error   | invalid JSON was received by the server. \\nAn error occurred on the server while parsing the JSON text. | |-32602 | Invalid params | Invalid method parameter(s). | 
     */
    constructor(code) { 
        
        ErrorMember.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['code'] = code;
    }

    /**
     * Constructs a <code>ErrorMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorMember} obj Optional instance to populate.
     * @return {module:model/ErrorMember} The populated <code>ErrorMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorMember();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorMember</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorMember.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }

        return true;
    }


}

ErrorMember.RequiredProperties = ["code"];

/**
 * A Number that indicates the error type that occurred. This MUST be an integer.  | code | message | description | |-----|-----|-------| | -32700   | Parse error   | invalid JSON was received by the server. \\nAn error occurred on the server while parsing the JSON text. | |-32602 | Invalid params | Invalid method parameter(s). | 
 * @member {Number} code
 */
ErrorMember.prototype['code'] = undefined;

/**
 * A String providing a short description of the error. The message SHOULD be limited to a concise single sentence. 
 * @member {String} message
 */
ErrorMember.prototype['message'] = undefined;

/**
 * A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.). 
 * @member {String} data
 */
ErrorMember.prototype['data'] = undefined;






export default ErrorMember;

