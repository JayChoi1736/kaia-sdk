/**
 * KLAYTN OPEN API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Result model module.
 * @module model/Result
 * @version 1.10.0
 */
class Result {
    /**
     * Constructs a new <code>Result</code>.
     * @alias module:model/Result
     * @param burntFee {Number} the amount burnt
     * @param kgf {Number} the amount allocated to KGF
     * @param kir {Number} the amount allocated to KIR
     * @param minted {Number} the amount newly minted
     * @param proposer {Number} the amount allocated to the block proposer
     * @param rewards {Object.<String, Number>} mapping from reward recipient to amounts
     * @param stakers {Number} total amount allocated to stakers
     * @param totalFee {Number} total tx fee spent
     */
    constructor(burntFee, kgf, kir, minted, proposer, rewards, stakers, totalFee) { 
        
        Result.initialize(this, burntFee, kgf, kir, minted, proposer, rewards, stakers, totalFee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, burntFee, kgf, kir, minted, proposer, rewards, stakers, totalFee) { 
        obj['burntFee'] = burntFee;
        obj['kgf'] = kgf;
        obj['kir'] = kir;
        obj['minted'] = minted;
        obj['proposer'] = proposer;
        obj['rewards'] = rewards;
        obj['stakers'] = stakers;
        obj['totalFee'] = totalFee;
    }

    /**
     * Constructs a <code>Result</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Result} obj Optional instance to populate.
     * @return {module:model/Result} The populated <code>Result</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Result();

            if (data.hasOwnProperty('burntFee')) {
                obj['burntFee'] = ApiClient.convertToType(data['burntFee'], 'Number');
            }
            if (data.hasOwnProperty('kgf')) {
                obj['kgf'] = ApiClient.convertToType(data['kgf'], 'Number');
            }
            if (data.hasOwnProperty('kir')) {
                obj['kir'] = ApiClient.convertToType(data['kir'], 'Number');
            }
            if (data.hasOwnProperty('minted')) {
                obj['minted'] = ApiClient.convertToType(data['minted'], 'Number');
            }
            if (data.hasOwnProperty('proposer')) {
                obj['proposer'] = ApiClient.convertToType(data['proposer'], 'Number');
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('stakers')) {
                obj['stakers'] = ApiClient.convertToType(data['stakers'], 'Number');
            }
            if (data.hasOwnProperty('totalFee')) {
                obj['totalFee'] = ApiClient.convertToType(data['totalFee'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Result</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Result</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Result.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Result.RequiredProperties = ["burntFee", "kgf", "kir", "minted", "proposer", "rewards", "stakers", "totalFee"];

/**
 * the amount burnt
 * @member {Number} burntFee
 */
Result.prototype['burntFee'] = undefined;

/**
 * the amount allocated to KGF
 * @member {Number} kgf
 */
Result.prototype['kgf'] = undefined;

/**
 * the amount allocated to KIR
 * @member {Number} kir
 */
Result.prototype['kir'] = undefined;

/**
 * the amount newly minted
 * @member {Number} minted
 */
Result.prototype['minted'] = undefined;

/**
 * the amount allocated to the block proposer
 * @member {Number} proposer
 */
Result.prototype['proposer'] = undefined;

/**
 * mapping from reward recipient to amounts
 * @member {Object.<String, Number>} rewards
 */
Result.prototype['rewards'] = undefined;

/**
 * total amount allocated to stakers
 * @member {Number} stakers
 */
Result.prototype['stakers'] = undefined;

/**
 * total tx fee spent
 * @member {Number} totalFee
 */
Result.prototype['totalFee'] = undefined;






export default Result;

