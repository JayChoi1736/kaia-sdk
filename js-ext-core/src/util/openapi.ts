// Integration toolkit for code generated by openapi-generator-javascript.
import _ from "lodash";

// JsonRpcClient is an ApiClient replacement built using existing JSON-RPC client.
// ApiClient has many methods, but implementing callApi() is actually sufficient
// for the purpose of JSON-RPC.
// For example, JsonRpcClient can be built from ethers.JsonRpcProvider or web3.HttpProvider.
export type rpcSendFunction = (method: string, params: any[]) => Promise<any>;
export class JsonRpcClient {
  send: rpcSendFunction;

  constructor(send: rpcSendFunction) {
    this.send = send;
  }

  callApi(
    _path:         any,
    _httpMethod:   any,
    _pathParams:   any,
    _queryParams:  any,
    _headerParams: any,
    _formParams:   any,
    bodyParam:     { method: string, params: any[] },
    _authNames:    any,
    _contentTypes: any,
    _accepts:      any,
    _returnType:   any,
    _apiBasePath:  any,
    callback:      (err: any, data: any) => void,
  ): any {
    this.send(bodyParam.method, bodyParam.params)
      .then((data: any) => callback(null, data))
      .catch((err: any) => callback(err, null));
  }
}

// NamespaceApi is a class generated by openapi-generator-javascript.
type openApiMethod = (...args: any[]) => any;
declare class NamespaceApi {
  constructor(client: any);
  [methodName: string | symbol]: openApiMethod;
}

// AsyncNamespaceApi is a collection of async methods that wraps NamespaceApi.
type asyncApiMethod = (...args: any[]) => Promise<any>;
declare class AsyncNamespaceApi {
  [methodName: string | symbol]: asyncApiMethod | any;
}

function promisifyMethod(openApi: NamespaceApi, methodName: string | symbol, numArgs: number): asyncApiMethod {
  return async function (...args: any[]): Promise<any> {
    if (args.length != numArgs) {
      throw new Error(`API ${String(methodName)} expects ${numArgs} arguments, got ${args.length}`);
    }

    const opts = {};

    return new Promise((resolve, reject) => {
      openApi[methodName](...args, opts, (err: any, res: any) => {
        if (err) {
          reject(err);
        } else {
          resolve(res);
        }
      });
    });
  };
}

// promisifyApi converts NamespaceApi to AsyncNamespaceApi by promisifying each methods.
export function promisifyApi(openApi: NamespaceApi): AsyncNamespaceApi {
  const asyncApi: AsyncNamespaceApi = {};

  const proto = Reflect.getPrototypeOf(openApi);
  if (!proto) {
    throw new Error("Cannot promisify OpenApi object");
  }

  const methods = Reflect.ownKeys(proto);
  for (const methodName of methods) {
    // Assume the prototype has only constructor and API methods;
    // anything other that the constructor is an API method.
    if (methodName == "constructor") {
      continue;
    }

    const method = Reflect.get(proto, methodName);
    if (!_.isFunction(method)) {
      continue;
    }
    if (method.length < 2) {
      // Function.length is the number of arguments.
      // OpenApi generated methods have at least 2 arguments: opts, callback.
      continue;
    }

    const numArgs = method.length - 2;
    asyncApi[methodName] = promisifyMethod(openApi, methodName, numArgs);
  }

  return asyncApi;
}

export function asyncOpenApi(send: rpcSendFunction, Clazz: typeof NamespaceApi): AsyncNamespaceApi {
  const client = new JsonRpcClient(send);
  const api = new Clazz(client);
  return promisifyApi(api);
}
