openapi: "3.0.2"
info:
  title: Klay Open API
  version: "1.10.0"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:7151

paths:
  /eth/call:
    post:
      summary: "[call] Used to query internal contract state, to execute validations coded into a contract or even to test what the effect of a transaction would be without running it live."
      tags:
        - eth.transaction
      operationId: eth_call
      description: |
        Executes a new message call immediately, without creating a transaction on the block chain. The eth_call method can be used to query internal contract state, to execute validations coded into a contract or even to test what the effect of a transaction would be without running it live.
        
        **JSONRPC:** `eth_call`
        
        **NOTE:** 
        
        **The goal of the state override set is manyfold**:
        
        It can be used by DApps to reduce the amount of contract code needed to be deployed on chain. Code that simply returns internal state or does pre-defined validations can be kept off chain and fed to the node on-demand.
        
        It can be used for smart contract analysis by extending the code deployed on chain with custom methods and invoking them. This avoids having to download and reconstruct the entire state in a sandbox to run custom code against.
        
        It can be used to debug smart contracts in an already deployed large suite of contracts by selectively overriding some code or state and seeing how execution changes. Specialized tooling will probably be necessary.

      parameters:
        - name: callObject
          in: query
          description: The transaction call object. See the next table for the object's properties.
          required: true
          schema:
            $ref: "../../../components/schemas/common/Common.yaml#/components/schemas/CallObject"
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.The block number is mandatory and defines the context (state) against which the specified transaction should be executed.
          required: true
          schema:
            $ref: "../../../components/schemas/common/Common.yaml#/components/schemas/BlockNumberOrHashOrTag"
        - name: stateOverrideSet
          in: query
          description: The state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.
          required: true
          schema:
            $ref: "../../../components/schemas/eth/transaction/Call.yaml#/components/schemas/StateOverrideSet"

      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../../../components/requests/JsonRpcRequest.yaml#/components/schemas/JsonRpcRequest"
                - $ref: "../../../components/schemas/eth/transaction/Call.yaml#/components/schemas/CallReq"

      responses:
        default:
          description:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "../../../components/responses/JsonRpcResponse.yaml#/components/schemas/JsonRpcResponse"
                  - $ref: "../../../components/schemas/eth/transaction/Call.yaml#/components/schemas/CallResp"

      externalDocs:
        url: https://docs.klaytn.foundation/content/dapp/json-rpc/api-references/eth/transaction#eth_call
        description: Klaytn Docs
      x-codeSamples:
        - lang: "curl"
          label: "Curl"
          source:
            $ref: "../../../code-samples/curl/eth/transaction/call.sh"
        # - lang: "java"
        #   label: "Java"
        #   source:
        #     $ref: ""
        #- lang: "javascript"
        #  label: "Javascript"
        #  source:
        #    $ref: ""
        #- lang: "python"
        #  label: "Python"
        #  source:
        #    $ref: ""
