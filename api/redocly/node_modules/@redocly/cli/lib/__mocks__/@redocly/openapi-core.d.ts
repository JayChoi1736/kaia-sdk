/// <reference types="jest" />
import { Document, ResolveError } from '@redocly/openapi-core';
export declare const __redoclyClient: {
    isAuthorizedWithRedocly: jest.Mock<any, any>;
    isAuthorizedWithRedoclyByRegion: jest.Mock<any, any>;
    login: jest.Mock<any, any>;
    registryApi: {
        setAccessTokens: jest.Mock<any, any>;
        authStatus: jest.Mock<any, any>;
        prepareFileUpload: jest.Mock<any, any>;
        pushApi: jest.Mock<any, any>;
    };
};
export declare const RedoclyClient: jest.Mock<{
    isAuthorizedWithRedocly: jest.Mock<any, any>;
    isAuthorizedWithRedoclyByRegion: jest.Mock<any, any>;
    login: jest.Mock<any, any>;
    registryApi: {
        setAccessTokens: jest.Mock<any, any>;
        authStatus: jest.Mock<any, any>;
        prepareFileUpload: jest.Mock<any, any>;
        pushApi: jest.Mock<any, any>;
    };
}, []>;
export declare const loadConfig: jest.Mock<{
    configFile: null;
    styleguide: {
        addIgnore: jest.Mock<any, any>;
        skipRules: jest.Mock<any, any>;
        skipPreprocessors: jest.Mock<any, any>;
        saveIgnore: jest.Mock<any, any>;
        skipDecorators: jest.Mock<any, any>;
        ignore: null;
    };
}, []>;
export declare const getMergedConfig: jest.Mock<any, any>;
export declare const lint: jest.Mock<any, any>;
export declare const bundle: jest.Mock<{
    bundle: {
        parsed: null;
    };
    problems: null;
}, []>;
export declare const getTotals: jest.Mock<{
    errors: number;
}, []>;
export declare const formatProblems: jest.Mock<any, any>;
export declare const slash: jest.Mock<any, any>;
export declare const findConfig: jest.Mock<any, any>;
export declare const doesYamlFileExist: jest.Mock<any, any>;
export declare const bundleDocument: jest.Mock<Promise<{
    problems: {};
}>, []>;
export declare const detectOpenAPI: jest.Mock<any, any>;
export declare const isAbsoluteUrl: jest.Mock<any, any>;
export declare class BaseResolver {
    cache: Map<string, Promise<ResolveError | Document>>;
    getFiles: jest.Mock<any, any>;
    resolveExternalRef: jest.Mock<any, any>;
    loadExternalRef: typeof jest.fn;
    parseDocument: jest.Mock<any, any>;
    resolveDocument: jest.Mock<any, any>;
}
export declare enum OasVersion {
    Version2 = "oas2",
    Version3_0 = "oas3_0",
    Version3_1 = "oas3_1"
}
export declare enum Oas3Operations {
    get = "get",
    put = "put",
    post = "post",
    delete = "delete",
    options = "options",
    head = "head",
    patch = "patch",
    trace = "trace"
}
