#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("./assert-node-version");
const yargs = require("yargs");
const types_1 = require("./types");
const openapi_core_1 = require("@redocly/openapi-core");
const preview_docs_1 = require("./commands/preview-docs");
const stats_1 = require("./commands/stats");
const split_1 = require("./commands/split");
const join_1 = require("./commands/join");
const push_1 = require("./commands/push");
const lint_1 = require("./commands/lint");
const bundle_1 = require("./commands/bundle");
const login_1 = require("./commands/login");
const build_docs_1 = require("./commands/build-docs");
const version = require('../package.json').version;
yargs
    .version('version', 'Show version number.', version)
    .help('help', 'Show help.')
    .command('stats [api]', 'Gathering statistics for a document.', (yargs) => yargs.positional('api', { type: 'string' }).option({
    config: { description: 'Specify path to the config file.', type: 'string' },
    format: {
        description: 'Use a specific output format.',
        choices: ['stylish', 'json'],
        default: 'stylish',
    },
}), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'stats';
    stats_1.handleStats(argv);
})
    .command('split [api]', 'Split definition into a multi-file structure.', (yargs) => yargs
    .positional('api', {
    description: 'API definition file that you want to split',
    type: 'string',
})
    .option({
    outDir: {
        description: 'Output directory where files will be saved.',
        required: true,
        type: 'string',
    },
    separator: {
        description: 'File path separator used while splitting.',
        required: false,
        type: 'string',
        default: '_',
    },
})
    .demandOption('api'), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'split';
    split_1.handleSplit(argv);
})
    .command('join [apis...]', 'Join definitions [experimental].', (yargs) => yargs
    .positional('apis', {
    array: true,
    type: 'string',
    demandOption: true,
})
    .option({
    lint: { description: 'Lint definitions', type: 'boolean', default: false },
    'prefix-tags-with-info-prop': {
        description: 'Prefix tags with property value from info object.',
        requiresArg: true,
        type: 'string',
    },
    'prefix-tags-with-filename': {
        description: 'Prefix tags with property value from file name.',
        type: 'boolean',
        default: false,
    },
    'prefix-components-with-info-prop': {
        description: 'Prefix components with property value from info object.',
        requiresArg: true,
        type: 'string',
    },
    'without-x-tag-groups': {
        description: 'Skip automated x-tagGroups creation',
        type: 'boolean',
    },
    output: {
        describe: 'Output file',
        alias: 'o',
        type: 'string',
        default: 'openapi.yaml',
    },
}), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'join';
    join_1.handleJoin(argv, version);
})
    .command('push [maybeApiOrDestination] [maybeDestination] [maybeBranchName]', 'Push an API definition to the Redocly API registry.', (yargs) => yargs
    .positional('maybeApiOrDestination', { type: 'string' })
    .positional('maybeDestination', { type: 'string' })
    .positional('maybeBranchName', { type: 'string' })
    .option({
    branch: { type: 'string', alias: 'b' },
    upsert: { type: 'boolean', alias: 'u' },
    'batch-id': {
        description: 'Specifies the ID of the CI job that the current push will be associated with.',
        type: 'string',
        requiresArg: true,
    },
    'batch-size': {
        description: 'Specifies the total number of CI jobs planned to be pushed.',
        type: 'number',
        requiresArg: true,
    },
    region: { description: 'Specify a region.', alias: 'r', choices: types_1.regionChoices },
    'skip-decorator': {
        description: 'Ignore certain decorators.',
        array: true,
        type: 'string',
    },
    public: {
        description: 'Make API registry available to the public',
        type: 'boolean',
    },
    files: {
        description: 'List of other folders and files to upload',
        array: true,
        type: 'string',
    },
})
    .implies('batch-id', 'batch-size')
    .implies('batch-size', 'batch-id'), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'push';
    push_1.transformPush(push_1.handlePush)(argv);
})
    .command('lint [apis...]', 'Lint definition.', (yargs) => yargs.positional('apis', { array: true, type: 'string', demandOption: true }).option({
    format: {
        description: 'Use a specific output format.',
        choices: [
            'stylish',
            'codeframe',
            'json',
            'checkstyle',
            'codeclimate',
            'summary',
        ],
        default: 'codeframe',
    },
    'max-problems': {
        requiresArg: true,
        description: 'Reduce output to max N problems.',
        type: 'number',
        default: 100,
    },
    'generate-ignore-file': {
        description: 'Generate ignore file.',
        type: 'boolean',
    },
    'skip-rule': {
        description: 'Ignore certain rules.',
        array: true,
        type: 'string',
    },
    'skip-preprocessor': {
        description: 'Ignore certain preprocessors.',
        array: true,
        type: 'string',
    },
    'lint-config': {
        description: 'Apply severity for linting the config file.',
        choices: ['warn', 'error', 'off'],
        default: 'warn',
    },
    config: {
        description: 'Specify path to the config file.',
        requiresArg: true,
        type: 'string',
    },
    extends: {
        description: 'Override extends configurations (defaults or config file settings).',
        requiresArg: true,
        array: true,
        type: 'string',
    },
}), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'lint';
    lint_1.handleLint(argv, version);
})
    .command('bundle [apis...]', 'Bundle definition.', (yargs) => yargs.positional('apis', { array: true, type: 'string', demandOption: true }).options({
    output: { type: 'string', alias: 'o' },
    format: {
        description: 'Use a specific output format.',
        choices: ['stylish', 'codeframe', 'json', 'checkstyle'],
        default: 'codeframe',
    },
    'max-problems': {
        requiresArg: true,
        description: 'Reduce output to max N problems.',
        type: 'number',
        default: 100,
    },
    ext: {
        description: 'Bundle file extension.',
        requiresArg: true,
        choices: types_1.outputExtensions,
    },
    'skip-rule': {
        description: 'Ignore certain rules.',
        array: true,
        type: 'string',
    },
    'skip-preprocessor': {
        description: 'Ignore certain preprocessors.',
        array: true,
        type: 'string',
    },
    'skip-decorator': {
        description: 'Ignore certain decorators.',
        array: true,
        type: 'string',
    },
    dereferenced: {
        alias: 'd',
        type: 'boolean',
        description: 'Produce fully dereferenced bundle.',
    },
    force: {
        alias: 'f',
        type: 'boolean',
        description: 'Produce bundle output even when errors occur.',
    },
    config: {
        description: 'Specify path to the config file.',
        type: 'string',
    },
    lint: {
        description: 'Lint definitions',
        type: 'boolean',
        default: false,
    },
    metafile: {
        description: 'Produce metadata about the bundle',
        type: 'string',
    },
    extends: {
        description: 'Override extends configurations (defaults or config file settings).',
        requiresArg: true,
        array: true,
        type: 'string',
    },
    'remove-unused-components': {
        description: 'Remove unused components.',
        type: 'boolean',
        default: false,
    },
    'keep-url-references': {
        description: 'Keep absolute url references.',
        type: 'boolean',
        alias: 'k',
    },
}), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'bundle';
    bundle_1.handleBundle(argv, version);
})
    .command('login', 'Login to the Redocly API registry with an access token.', (yargs) => __awaiter(void 0, void 0, void 0, function* () {
    return yargs.options({
        verbose: {
            description: 'Include additional output.',
            type: 'boolean',
        },
        region: {
            description: 'Specify a region.',
            alias: 'r',
            choices: types_1.regionChoices,
        },
    });
}), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'login';
    login_1.handleLogin(argv);
})
    .command('logout', 'Clear your stored credentials for the Redocly API registry.', (yargs) => yargs, () => __awaiter(void 0, void 0, void 0, function* () {
    process.env.REDOCLY_CLI_COMMAND = 'logout';
    const client = new openapi_core_1.RedoclyClient();
    client.logout();
    process.stdout.write('Logged out from the Redocly account. âœ‹\n');
}))
    .command('preview-docs [api]', 'Preview API reference docs for the specified definition.', (yargs) => yargs.positional('api', { type: 'string' }).options({
    port: {
        alias: 'p',
        type: 'number',
        default: 8080,
        description: 'Preview port.',
    },
    host: {
        alias: 'h',
        type: 'string',
        default: '127.0.0.1',
        description: 'Preview host.',
    },
    'skip-preprocessor': {
        description: 'Ignore certain preprocessors.',
        array: true,
        type: 'string',
    },
    'skip-decorator': {
        description: 'Ignore certain decorators.',
        array: true,
        type: 'string',
    },
    'use-community-edition': {
        description: 'Force using Redoc CE for docs preview.',
        type: 'boolean',
    },
    force: {
        alias: 'f',
        type: 'boolean',
        description: 'Produce bundle output even when errors occur.',
    },
    config: {
        description: 'Specify path to the config file.',
        type: 'string',
    },
}), (argv) => {
    process.env.REDOCLY_CLI_COMMAND = 'preview-docs';
    preview_docs_1.previewDocs(argv);
})
    .command('build-docs [api]', 'build definition into zero-dependency HTML-file', (yargs) => yargs
    .positional('api', { type: 'string' })
    .options({
    o: {
        describe: 'Output file',
        alias: 'output',
        type: 'string',
        default: 'redoc-static.html',
    },
    title: {
        describe: 'Page Title',
        type: 'string',
    },
    disableGoogleFont: {
        describe: 'Disable Google Font',
        type: 'boolean',
        default: false,
    },
    cdn: {
        describe: 'Do not include Redoc source code into html page, use link to CDN instead',
        type: 'boolean',
        default: false,
    },
    t: {
        alias: 'template',
        describe: 'Path to handlebars page template, see https://git.io/vh8fP for the example',
        type: 'string',
    },
    templateOptions: {
        describe: 'Additional options that you want pass to template. Use dot notation, e.g. templateOptions.metaDescription',
    },
    theme: {
        describe: 'Redoc theme.openapi, use dot notation, e.g. theme.openapi.nativeScrollbars',
    },
    config: {
        describe: 'Specify path to the config file.',
        type: 'string',
    },
})
    .check((argv) => {
    var _a;
    if (argv.theme && !((_a = argv.theme) === null || _a === void 0 ? void 0 : _a.openapi))
        throw Error('Invalid option: theme.openapi not set');
    return true;
}), (argv) => __awaiter(void 0, void 0, void 0, function* () {
    process.env.REDOCLY_CLI_COMMAND = 'build-docs';
    build_docs_1.handlerBuildCommand(argv);
}))
    .completion('completion', 'Generate completion script.')
    .demandCommand(1)
    .strict().argv;
