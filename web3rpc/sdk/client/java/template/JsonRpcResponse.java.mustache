

package org.web3j.protocol.klaytn.core.method.response;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
* JsonRpcResponse
*/
@JsonPropertyOrder({
JsonRpcResponse.JSON_PROPERTY_JSONRPC,
JsonRpcResponse.JSON_PROPERTY_ID,
JsonRpcResponse.JSON_PROPERTY_ERROR,
JsonRpcResponse.JSON_PROPERTY_RESULT
})
@javax.annotation.Generated(value = "web3rpc.client.KlaytnJavaClientCodegen", date = "2023-07-31T21:57:00.304207694+07:00[Asia/Ho_Chi_Minh]")
public class JsonRpcResponse {
    public static final String JSON_PROPERTY_JSONRPC = "jsonrpc";
    private String jsonrpc = "2.0";

    public static final String JSON_PROPERTY_ID = "id";
    private long id;

    public static final String JSON_PROPERTY_ERROR = "error";
    private Error error;

    public static final String JSON_PROPERTY_RESULT = "result";
    private Object result = null;

    public JsonRpcResponse() {
    }

    public JsonRpcResponse jsonrpc(String jsonrpc) {

    this.jsonrpc = jsonrpc;
        return this;
    }

    /**
    * Get jsonrpc
    * @return jsonrpc
    **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_JSONRPC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getJsonrpc() {
        return jsonrpc;
    }


    @JsonProperty(JSON_PROPERTY_JSONRPC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setJsonrpc(String jsonrpc) {
        this.jsonrpc = jsonrpc;
    }


    public JsonRpcResponse id(long id) {

    this.id = id;
      return this;
    }

    /**
    * Get id
    * @return id
    **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public long getId() {
      return id;
    }


    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(long id) {
        this.id = id;
    }


    public JsonRpcResponse error(Error error) {

    this.error = error;
        return this;
    }

    /**
    * Get error
    * @return error
    **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ERROR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Error getError() {
        return error;
    }


    @JsonProperty(JSON_PROPERTY_ERROR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setError(Error error) {
        this.error = error;
    }


    public JsonRpcResponse result(Object result) {

    this.result = result;
        return this;
    }

    /**
    * Get result
    * @return result
    **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RESULT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Object getResult() {
        return result;
    }


    @JsonProperty(JSON_PROPERTY_RESULT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResult(Object result) {
        this.result = result;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
        JsonRpcResponse jsonRpcResponse = (JsonRpcResponse) o;
        return Objects.equals(this.jsonrpc, jsonRpcResponse.jsonrpc) &&
        Objects.equals(this.id, jsonRpcResponse.id) &&
        Objects.equals(this.error, jsonRpcResponse.error) &&
        Objects.equals(this.result, jsonRpcResponse.result);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jsonrpc, id, error, result);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JsonRpcResponse {\n");
        sb.append("    jsonrpc: ").append(toIndentedString(jsonrpc)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    result: ").append(toIndentedString(result)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
        return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

