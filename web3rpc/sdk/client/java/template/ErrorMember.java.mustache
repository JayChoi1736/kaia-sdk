
package org.web3j.protocol.klaytn.core.method.response;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
* ErrorMember
*/
@JsonPropertyOrder({
ErrorMember.JSON_PROPERTY_CODE,
ErrorMember.JSON_PROPERTY_MESSAGE,
ErrorMember.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "web3rpc.client.KlaytnJavaClientCodegen", date = "2023-07-31T21:57:00.304207694+07:00[Asia/Ho_Chi_Minh]")
public class ErrorMember {
    public static final String JSON_PROPERTY_CODE = "code";
    private long code;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public static final String JSON_PROPERTY_DATA = "data";
    private String data;

    public ErrorMember() {
    }

    public ErrorMember code(long code) {
        this.code = code;
        return this;
    }

    /**
    * A Number that indicates the error type that occurred. This MUST be an integer.  | code | message | description | |-----|-----|-------| | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. | |-32602 | Invalid params | Invalid method parameter(s). |
    * @return code
    **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public long getCode() {
        return code;
    }


    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCode(long code) {
        this.code = code;
    }


    public ErrorMember message(String message) {

    this.message = message;
        return this;
    }

    /**
    * A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.
    * @return message
    **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getMessage() {
        return message;
    }


    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessage(String message) {
        this.message = message;
    }


    public ErrorMember data(String data) {
        this.data = data;
        return this;
    }

    /**
    * A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    * @return data
    **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getData() {
        return data;
    }


    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setData(String data) {
        this.data = data;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
        ErrorMember errorMember = (ErrorMember) o;
        return Objects.equals(this.code, errorMember.code) &&
        Objects.equals(this.message, errorMember.message) &&
        Objects.equals(this.data, errorMember.data);
    }

    @Override
    public int hashCode() {
      return Objects.hash(code, message, data);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ErrorMember {\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
        return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
